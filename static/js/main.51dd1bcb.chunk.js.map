{"version":3,"sources":["store/loading.ts","store/posts.ts","store/errorMessage.ts","store/filterQuery.ts","helpers/api.ts","store/index.ts","components/StartButton/StartButton.tsx","components/UserCard/UserCard.tsx","components/RemoveButton/RemoveButton.tsx","components/CommentCard/CommentCard.tsx","components/CommentsList/CommentsList.tsx","components/PostCard/PostCard.tsx","components/PostList/PostList.tsx","components/PostFilter/PostFilter.tsx","helpers/debounce.ts","App.tsx","index.tsx"],"names":["loadingReducer","loading","action","type","loadSuccess","posts","postsReducer","filter","post","id","map","postId","comments","comment","errorReducer","errorMessage","setFilterQuery","filterQuery","filterReducer","getData","url","fetch","then","response","json","getPostsData","a","usersFromServer","postsFromServer","commentsFromServer","preparedPosts","user","find","userId","rootReducer","combineReducers","isLoading","getPosts","state","getLoadingStatus","getErrorMessage","getFilterQuery","store","createStore","composeWithDevTools","applyMiddleware","thunk","StartButton","dispatch","useDispatch","useSelector","onClick","catch","finally","disabled","UserCard","name","email","address","className","city","street","suite","RemoveButton","size","aria-label","CommentCard","body","removeComment","CommentsList","commentsList","key","PostCard","title","removePost","PostList","PostFilter","updateFilterQuery","useCallback","func","delay","timerId","clearTimeout","args","setTimeout","debounce","query","onChange","event","target","value","App","visiblePosts","useMemo","toLowerCase","includes","filterPosts","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51dd1bcb.chunk.js","sourcesContent":["import { Action } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\ntype StartLoading = Action<typeof START_LOADING>;\ntype FinishLoading = Action<typeof FINISH_LOADING>;\ntype LoadingStatus = StartLoading | FinishLoading;\n\nexport const startLoading = (): StartLoading => ({ type: START_LOADING });\nexport const finishLoading = (): FinishLoading => ({ type: FINISH_LOADING });\n\nconst loadingReducer = (loading = false, action: LoadingStatus) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { Action } from 'redux';\n\nconst LOAD_SUCCESS = 'LOAD_SUCCESS';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\ntype LoadSuccess = Action<typeof LOAD_SUCCESS> & { posts: PreparedPost[] };\ntype RemovePost = Action<typeof REMOVE_POST> & { id: number };\ntype RemoveComment = Action<typeof REMOVE_COMMENT> & { id: number; postId: number };\n\nexport const loadSuccess = (posts: PreparedPost[]): LoadSuccess => ({\n  type: LOAD_SUCCESS,\n  posts,\n});\n\nexport const removePost = (id: number): RemovePost => ({\n  type: REMOVE_POST,\n  id,\n});\n\nexport const removeComment = (id: number, postId: number): RemoveComment => ({\n  type: REMOVE_COMMENT,\n  id,\n  postId,\n});\n\ntype PostAction = LoadSuccess | RemovePost | RemoveComment;\n\nconst postsReducer = (posts = [] as PreparedPost[], action: PostAction) => {\n  switch (action.type) {\n    case LOAD_SUCCESS:\n      return action.posts;\n\n    case REMOVE_POST:\n      return posts.filter(post => post.id !== action.id);\n\n    case REMOVE_COMMENT:\n      return posts.map(post => ((post.id === action.postId) ? {\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== action.id),\n      } : post));\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import { Action } from 'redux';\n\nconst LOAD_ERROR = 'LOAD_ERROR';\n\ntype LoadError = Action<typeof LOAD_ERROR> & { errorMessage: string };\n\nexport const loadError = (errorMessage: string): LoadError => ({\n  type: LOAD_ERROR,\n  errorMessage,\n});\n\nconst errorReducer = (errorMessage = '', action: LoadError) => {\n  switch (action.type) {\n    case LOAD_ERROR:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default errorReducer;\n","import { Action } from 'redux';\n\nconst FILTER_QUERY = 'FILTER_QUERY';\n\ntype FilterQuery = Action<typeof FILTER_QUERY> & { filterQuery: string };\n\nexport const setFilterQuery = (filterQuery: string): FilterQuery => ({\n  type: FILTER_QUERY,\n  filterQuery,\n});\n\nconst filterReducer = (filterQuery = '', action: FilterQuery) => {\n  switch (action.type) {\n    case FILTER_QUERY:\n      return action.filterQuery;\n\n    default:\n      return filterQuery;\n  }\n};\n\nexport default filterReducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst USERS_PATH = '/users.json';\nconst POSTS_PATH = '/posts.json';\nconst COMMENTS_PATH = '/comments.json';\n\nconst getData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getPostsData = async (): Promise<PreparedPost[]> => {\n  const usersFromServer = await getData<User>(USERS_PATH);\n  const postsFromServer = await getData<Post>(POSTS_PATH);\n  const commentsFromServer = await getData<Comment>(COMMENTS_PATH);\n\n  const preparedPosts = postsFromServer.map((post: Post) => ({\n    ...post,\n    user: usersFromServer.find((user: User) => user.id === post.userId),\n    comments: commentsFromServer.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport postsReducer, { loadSuccess } from './posts';\nimport errorReducer, { loadError } from './errorMessage';\nimport filterReducer from './filterQuery';\nimport { getPostsData } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: loadingReducer,\n  errorMessage: errorReducer,\n  filterQuery: filterReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getPosts = (state: RootState) => state.posts;\nexport const getLoadingStatus = (state: RootState) => state.isLoading;\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\nexport const getFilterQuery = (state: RootState) => state.filterQuery;\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadPosts())\n */\nexport const loadPosts = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    return getPostsData()\n      .then(posts => dispatch(loadSuccess(posts)))\n      .catch(() => dispatch(loadError('Error occurred when loading data')))\n      .finally(() => dispatch(finishLoading()));\n  };\n};\n\nconst initialState: RootState = {\n  posts: [],\n  isLoading: false,\n  errorMessage: '',\n  filterQuery: '',\n};\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getLoadingStatus, loadPosts } from '../../store';\n\nexport const StartButton = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoadingStatus);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch(loadPosts())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport './UserCard.css';\n\ntype Props = User;\n\nexport const UserCard: React.FC<Props> = ({ name, email, address }) => (\n  <div className=\"post__autor user\">\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Autor: </span>\n      {name}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Email: </span>\n      {email}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Address: </span>\n      {address.city}\n      ,\n      {' '}\n      {address.street}\n      ,\n      {' '}\n      {address.suite}\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './RemoveButton.css';\n\ntype Props = {\n  size: string;\n  onClick: () => void;\n};\n\nexport const RemoveButton: React.FC<Props> = ({ onClick, size }) => (\n  <button\n    className={`remove-btn remove-btn--${size}`}\n    type=\"button\"\n    onClick={onClick}\n    aria-label=\"remove button\"\n  />\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './CommentCard.css';\nimport { RemoveButton } from '../RemoveButton/RemoveButton';\nimport { removeComment } from '../../store/posts';\n\ntype Props = Comment;\n\nexport const CommentCard: React.FC<Props> = ({\n  name, body, email, id, postId,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"post__comment comment\">\n      <div className=\"comment__header\">\n        <h3 className=\"comment__title\">\n          {name}\n        </h3>\n        <RemoveButton\n          size=\"small\"\n          onClick={() => dispatch(removeComment(id, postId))}\n        />\n      </div>\n      <p className=\"comment__text\">\n        {body}\n      </p>\n      <span className=\"comment__email\">\n        {email}\n      </span>\n    </li>\n  );\n};\n","import React from 'react';\n\nimport { CommentCard } from '../CommentCard/CommentCard';\n\ntype Props = {\n  commentsList: Comment[];\n};\n\nexport const CommentsList: React.FC<Props> = ({ commentsList }) => (\n  <ul>\n    {commentsList.map((comment: Comment) => (\n      <CommentCard {...comment} key={comment.id} />\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './PostCard.css';\nimport { UserCard } from '../UserCard/UserCard';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport { RemoveButton } from '../RemoveButton/RemoveButton';\nimport { removePost } from '../../store/posts';\n\n\ntype Props = PreparedPost;\n\nexport const PostCard: React.FC<Props> = ({\n  title, body, user, comments, id,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"post-list__post post\">\n      <div className=\"post__header\">\n        <h2 className=\"post__title\">{title}</h2>\n        <RemoveButton size=\"large\" onClick={() => dispatch(removePost(id))} />\n      </div>\n      <p className=\"post__text\">{body}</p>\n      {user && <UserCard {...user} key={user.id} />}\n      {comments && <CommentsList commentsList={comments} />}\n    </li>\n  );\n};\n","import React from 'react';\nimport { PostCard } from '../PostCard/PostCard';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => (\n  <ul>\n    {posts.map((post: PreparedPost) => (\n      <PostCard {...post} key={post.id} />\n    ))}\n  </ul>\n);\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './PostFilter.css';\nimport { setFilterQuery } from '../../store/filterQuery';\nimport { getFilterQuery } from '../../store';\nimport { debounce } from '../../helpers/debounce';\n\nexport const filterPosts = (filterQuery: string, posts: PreparedPost[]) => (\n  posts.filter(({ title, body }) => (title + body)\n    .toLowerCase().includes(filterQuery.toLowerCase()))\n);\n\nexport const PostFilter = () => {\n  const dispatch = useDispatch();\n  const filterQuery = useSelector(getFilterQuery);\n\n  const updateFilterQuery = useCallback(\n    debounce(\n      (query: string) => {\n        dispatch(setFilterQuery(query));\n      }, 1000,\n    ), [filterQuery],\n  );\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateFilterQuery(event.target.value);\n  };\n\n  const resetFilter = () => {\n    dispatch(setFilterQuery(''));\n  };\n\n  return (\n    <div className=\"post-list__filter\">\n      <input\n        type=\"textarea\"\n        className=\"post-list__filter-input\"\n        onChange={handleFilterChange}\n      />\n      <button\n        type=\"button\"\n        onClick={resetFilter}\n      >\n        Reset\n      </button>\n    </div>\n  );\n};\n","export const debounce = <F extends (...args: any[]) => void>(\n  func: F,\n  delay: number,\n) => {\n  let timerId: any;\n\n  return (...args: any[]) => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(func, delay, ...args);\n  };\n};\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { StartButton } from './components/StartButton/StartButton';\nimport { PostList } from './components/PostList/PostList';\nimport { PostFilter, filterPosts } from './components/PostFilter/PostFilter';\n\nimport { getErrorMessage, getPosts, getFilterQuery } from './store';\n\nconst App = () => {\n  const errorMessage = useSelector(getErrorMessage);\n  const posts = useSelector(getPosts);\n  const filterQuery = useSelector(getFilterQuery);\n\n  const visiblePosts = useMemo(() => filterPosts(filterQuery, posts), [\n    filterQuery,\n    posts,\n  ]);\n\n  return (\n    <section className=\"post-list\">\n      <h1 className=\"post-list__title\">Dynamic list of posts</h1>\n\n      {posts.length === 0 ? (\n        <>\n          <StartButton />\n          {errorMessage && (<p>{errorMessage}</p>)}\n        </>\n      ) : (\n        <>\n          <PostFilter />\n          <PostList posts={visiblePosts} />\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}